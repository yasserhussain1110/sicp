(define (call-the-cops)
  (display "Cops called")
  (newline)
  "Cops called")

(define (make-account balance secret-password)
  (let ((consecutive-wrong-attempts 0))
    (lambda (password command)
      (if (eq? password secret-password)
          (begin (set! consecutive-wrong-attempts 0)
                 (lambda (amount)
                   (cond ((eq? command 'deposit) (set! balance (+ balance amount)) balance)
                         ((eq? command 'withdraw) (if (>= balance amount)
                                                      (begin (set! balance (- balance amount))
                                                             balance)
                                                      "Insufficient Funds"))
                         (else "Command Not Recognized"))))
          (begin (set! consecutive-wrong-attempts (+ consecutive-wrong-attempts 1))
                 (if (> consecutive-wrong-attempts 7) (call-the-cops) '())
                 (lambda (x) "Incorrect Password"))))))


;; Testing

(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40)
((acc 'some-other-password 'deposit) 50)
((acc 'secret-password 'deposit) 50)

((acc 'some-other-password 'deposit) 30)
((acc 'some-other-password 'deposit) 30)
((acc 'some-other-password 'deposit) 30)
((acc 'some-other-password 'deposit) 30)
((acc 'some-other-password 'deposit) 30)
((acc 'some-other-password 'deposit) 30)
((acc 'some-other-password 'deposit) 30)
((acc 'some-other-password 'deposit) 30)
((acc 'some-other-password 'deposit) 30)
((acc 'secret-password 'deposit) 30)
((acc 'some-other-password 'deposit) 30)
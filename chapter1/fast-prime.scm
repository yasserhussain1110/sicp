(define (fast-prime? num times)
        (define (exponent base expo) (cond ((= expo 0) 1)
                                           ((even? expo)
                                            (square (exponent base (/ expo 2)))) 
                                           (else (* base (exponent base (- expo 1))))))
        (define (expmod base expo m) (remainder (exponent base expo) m))
        (define (fermat-test? n) (define (try-it? r) (= (expmod r n n) r)) (try-it? (+ 1 (random (- n 1)))))
        (define (repeat-test? times) (cond ((= times 0) true)
                                           ((fermat-test? num) (repeat-test? (- times 1)))
                                           (else false)))
        (repeat-test? times))

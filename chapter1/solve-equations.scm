(define (search-old function neg-value pos-value)
  (define (is-negative? value) (< (function value) 0))
  (define (is-positive? value) (> (function value) 0))
  (define (average) (/ (+ neg-value pos-value) 2.0))
  (define (decide-result neg-value pos-value)
    (if (close-enough? neg-value pos-value)
	(average)
	(cond ((is-negative? (average)) (search-old function (average) pos-value))
	      ((is-positive? (average)) (search-old function neg-value (average)))
	      (else midpoint))))
  (decide-result neg-value pos-value))

(define (search-lambda function neg-value pos-value)
  (define (is-negative? value) (< (function value) 0))
  (define (is-positive? value) (> (function value) 0))
  (define (average) (/ (+ neg-value pos-value) 2.0))
  ((lambda (neg-value pos-value)
    (if (close-enough? neg-value pos-value)
	(average)
	((lambda (midpoint)
	  (cond ((is-negative? midpoint) (search-lambda function midpoint pos-value))
		((is-positive? midpoint) (search-lambda function neg-value midpoint))
		(else midpoint)))
	 (average))))
   neg-value pos-value))

(define (search-let function neg-value pos-value)
  (define (is-negative? value) (< (function value) 0))
  (define (is-positive? value) (> (function value) 0))
  (define (average) (/ (+ neg-value pos-value) 2.0))
  (let ((neg-value neg-value) (pos-value pos-value))
    (if (close-enough? neg-value pos-value)
	(average)
	(let ((midpoint (average)))
	  (cond ((is-positive? midpoint) (search-let function neg-value midpoint))
		((is-negative? midpoint) (search-let function midpoint pos-value))
		(else midpoint))))))

(define (half-interval-method function x y)
  (cond ((and (> (function x) 0) (< (function y) 0)) (search-let function y x))
	((and (< (function x) 0) (> (function y) 0)) (search-let function x y))
	(else
	 (error "Values should not be of same sign."))))

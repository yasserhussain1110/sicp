(define (fast-product a b)
    (define (fast-product-iter s a b) (cond ((= b 0) s)
                                            ((is_odd? b) (fast-product-iter (+ s a) a (- b 1)))
                                            (else (fast-product-iter s (double a) (half b)))))
    (define (is_odd? n) (= (remainder n 2) 1))
    (define (double n) (* n 2))
    (define (half n) (/ n 2))
    (fast-product-iter 0 a b))

(define (fast-recur-product a b)
    (define (is_odd? n) (= (remainder n 2) 1))
    (define (double n) (* n 2))
    (cond ((= b 0) 0)
        ((is_odd? b) (+ a (fast-recur-product a (- b 1))))
        (else (double (fast-recur-product a (/ b 2))))))
